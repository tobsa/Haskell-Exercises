------------------------------------------------------------
-- Square a number
------------------------------------------------------------
square :: (Num a) => a -> a
square x = x * x

------------------------------------------------------------
-- Cube a number
------------------------------------------------------------
cube :: (Num a) => a -> a
cube x = x * x * x

------------------------------------------------------------
-- Calculate faculty of a number
------------------------------------------------------------
fac :: (Num a) => a -> a
fac 0 = 1
fac x = x * fac(x - 1)

------------------------------------------------------------
-- Calculate the area of a triangle
------------------------------------------------------------
area :: Float -> Float -> Float -> Float
area x y z = sqrt(p * (p-x) * (p-y) * (p-z)) 
    where p = (x+y+z) / 2
    
------------------------------------------------------------
-- Exponent
------------------------------------------------------------
exp' :: Double -> Integer -> Double
exp' 0 0 = 1
exp' _ 0 = 1
exp' 0 _ = 0
exp' x y = x * exp' x (y - 1) 

------------------------------------------------------------
-- Euclides algorithm
------------------------------------------------------------
euclides :: Int -> Int -> Int
euclides a 0 = a
euclides a b = euclides b (a `mod` b)

------------------------------------------------------------
-- Sum all numbers in a list
------------------------------------------------------------
sum' :: (Num a) => [a] -> a
sum' []     = 0
sum' (x:xs) = x + sum' xs

------------------------------------------------------------
-- Average value of a list
------------------------------------------------------------
average :: [Double] -> Double
average []   = 0
average (xs) = sum' xs / fromIntegral(length xs)

------------------------------------------------------------
-- Length of a list
------------------------------------------------------------
length' :: (Num a) => [a] -> Int
length' []     = 0
length' (_:xs) = 1 + length xs

------------------------------------------------------------
-- Testing map (increase all elements by a value)
------------------------------------------------------------
map' :: (Num a) => [a] -> a -> [a]
map' [] _ = []
map' xs x = map (\x' -> x' + x) xs

------------------------------------------------------------
-- Testing filter (remove all negative elements
------------------------------------------------------------
filter' :: (Num a, Ord a) => [a] -> [a]
filter' [] = []
filter' xs = filter (>0) xs

------------------------------------------------------------
-- Testing foldr (calculate sum with foldr
------------------------------------------------------------
foldr' :: (Num a) => [a] -> a
foldr' [] = 0
foldr' xs = foldr (+) 0 xs

------------------------------------------------------------
-- Square and sum a list
------------------------------------------------------------
sumsquare :: (Num a, Ord a) => [a] -> a
sumsquare [] = 0
sumsquare xs = sum(map square (filter (>0) xs)) 